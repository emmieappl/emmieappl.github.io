[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Data Viz",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Emmie Appl",
    "section": "",
    "text": "Hello there! I am a Pomona College class of 2025 Molecular Biology major and Japanese minor. Currently, I am working as an undergraduate researcher in the Liu Lab studying mannitol-driven biofilm formation in Vibrio cholerae. Outside of the lab, I am a captain for the Pomona-Pitzer Swimming & Diving team."
  },
  {
    "objectID": "DataViz.html",
    "href": "DataViz.html",
    "title": "Data Viz",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Cheese.html",
    "href": "Cheese.html",
    "title": "Cheese",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Valentine's.html",
    "href": "Valentine's.html",
    "title": "Valentine’s Day",
    "section": "",
    "text": "Show the code\ntuesdata &lt;- tidytuesdayR::tt_load('2024-02-13')\n\n\n---- Compiling #TidyTuesday Information for 2024-02-13 ----\n--- There are 3 files available ---\n\n\n── Downloading files ───────────────────────────────────────────────────────────\n\n  1 of 3: \"historical_spending.csv\"\n  2 of 3: \"gifts_age.csv\"\n  3 of 3: \"gifts_gender.csv\"\n\n\nShow the code\nhistorical_spending &lt;- tuesdata$historical_spending\n\nlibrary(ggplot2)\n\nggplot(historical_spending, aes(x = Year, y = PerPerson)) +\n  geom_col() +\n  labs(\n    x = \"Year\",\n    y = \"Average Money Spent per Person ($)\"\n  )"
  },
  {
    "objectID": "UKdrugs.html",
    "href": "UKdrugs.html",
    "title": "European Drug Development",
    "section": "",
    "text": "This data set includes the drugs considered for authorization in the European Union between 1995 and 2023. A generic medicine is developed to be the same as a medicine that has already been authorized, with the same active ingredient(s) and dosage(s) to treat the same condition(s). Accelerated assessment indicates that the medicine is a major interest for public health, so its timeframe for review is 150 evaluation days rather than 210.\n\n\nShow the code\ntuesdata &lt;- tidytuesdayR::tt_load('2023-03-14')\n\ndrugs &lt;- tuesdata$drugs\n\nlibrary(ggplot2)\n\nggplot(drugs, aes(y = generic)) +\n  geom_bar(aes(fill = accelerated_assessment)) +\n  labs(\n    y = \"Generic Medicine\",\n    x = \"Drug Count\",\n    fill = \"Accelerated Assessment\"\n  )\n\n\n\n\n\n\n\n\n\nTidyTuesday 2023-03-14\nData from European Medicines Agency via Miquel Anglada Girotto"
  },
  {
    "objectID": "Valentines.html",
    "href": "Valentines.html",
    "title": "Valentine’s Day",
    "section": "",
    "text": "This data was collected by the National Retail Federation in the United States and explores how consumers celebrate Valentine’s Day from 2010 to 2022.\n\n\nShow the code\ntuesdata &lt;- tidytuesdayR::tt_load('2024-02-13')\n\nhistorical_spending &lt;- tuesdata$historical_spending\n\nlibrary(ggplot2)\n\nggplot(historical_spending, aes(x = Year, y = PerPerson)) +\n  geom_col() +\n  labs(\n    x = \"Year\",\n    y = \"Average Money Spent per Person ($)\"\n  )\n\n\n\n\n\n\n\n\n\nTidyTuesday 2024-02-13\nData from the National Retail Federation via Sunja aa Kaggle"
  },
  {
    "objectID": "StringAnalysis.html",
    "href": "StringAnalysis.html",
    "title": "String Analyses",
    "section": "",
    "text": "Firstly, I was curious as to which of the six main Friends characters had the most lines overall throughout the entire Friends series. The table below shows that Rachel had the most lines throughout the running of the show while Phoebe had the fewest.\n\n\nShow the code\nlibrary(friends)\nlibrary(tidyverse)\nlibrary(ggplot2)\n\nfriends |&gt;\n  group_by(speaker) |&gt;\n  summarize(num_lines = n()) |&gt;\n  arrange(desc(num_lines)) |&gt;\n  head()\n\n\n# A tibble: 6 × 2\n  speaker        num_lines\n  &lt;chr&gt;              &lt;int&gt;\n1 Rachel Green        9307\n2 Ross Geller         9157\n3 Chandler Bing       8462\n4 Monica Geller       8440\n5 Joey Tribbiani      8171\n6 Phoebe Buffay       7499\n\n\n\n\nShow the code\nquestions &lt;- friends |&gt;\n  select(text, speaker) |&gt;\n  filter(str_detect(speaker, \"Rachel Green|Monica Geller|Phoebe Buffay|Joey Tribbiani$|Chandler Bing|Ross Geller\")) |&gt;\n  mutate(totalquestions = str_count(text, \"\\\\?\")) |&gt;\n  group_by(speaker) |&gt;\n  summarize(num_questions = sum(totalquestions))\n  \ntotalnumber &lt;- friends |&gt;\n  select(text, speaker) |&gt;\n  filter(str_detect(speaker, \"Rachel Green|Monica Geller|Phoebe Buffay|Joey Tribbiani$|Chandler Bing|Ross Geller\")) |&gt;\n  mutate(totalphrases = str_count(text, \"\\\\?(?=\\\\s|$)|\\\\.(?=\\\\s|$)|\\\\!(?=\\\\s|$)\")) |&gt;\n  group_by(speaker) |&gt;\n  summarize(num_phrases = sum(totalphrases))\n  \nquestionsandtotal &lt;- full_join(questions, totalnumber) |&gt;\n  mutate(propquestions = num_questions/num_phrases) |&gt;\n  arrange(desc(propquestions))\n\nggplot(questionsandtotal, aes(x = speaker, y = propquestions)) +\n  geom_col(fill = \"thistle\") +\n  labs(\n    x = \"Character\",\n    y = \"Proportion of Sentences that are Questions\",\n    title = expression(paste(\"Which \", italic(\"Friends \"), \"Character is the Most Inquisitive?\"))\n  )\n\n\n\n\n\n\n\n\n\nThe next question I wanted to answer using the Friends data set was “which character asked the most questions?” during their time in the show. I went about answering this question by counting the number of questions each character asked, as well as the number of sentences each character spoke. By dividing the number of questions by the number of sentences (including questions), I calculated the proportion of sentences that were questions for each character. From this, I learned that Monica had the largest proportion of questions while Phoebe had the smallest.\n\n\nShow the code\nwithyear &lt;- left_join(friends, friends_info, by = c(\"season\", \"episode\")) |&gt;\n  mutate(year = as.factor(str_sub(air_date, 1, 4))) |&gt;\n  select(text, speaker, year) |&gt;\n  filter(str_detect(speaker, \"Rachel Green|Monica Geller|Phoebe Buffay|Joey Tribbiani$|Chandler Bing|Ross Geller\")) |&gt;\n  group_by(speaker, year) |&gt;\n  summarize(lines = n())\n\nggplot(withyear, aes(x = year, y = lines, group = speaker)) +\n  geom_line(aes(color = speaker)) +\n  labs(\n    x = \"Year\",\n    y = \"Number of Lines\",\n    title = expression(paste(\"Number of Lines Spoken by \", italic(\"Friends \"), \"Characters from 1994 to 2004\"))\n  )\n\n\n\n\n\n\n\n\n\nLastly, I wanted to know how the number of lines spoken by each character changed over the lifetime of the show. Ross began the show with the largest number of lines, but was overtaken by Rachel in 1997. Phoebe consistently had the smallest number of lines, except for in 2001 when Ross’ number of lines dropped to below hers. Because the series began in September of 1994 and ended in May of 2004, these years have fewer lines overall compared to the intermediary years.\nHvitfeldt E (2021). friends: The Entire Transcript from Friends in Tidy Format. R package version 0.1.0.9000, https://github.com/EmilHvitfeldt/friends.\nData originally from the Character Mining repository."
  },
  {
    "objectID": "BirthdayParadox.html",
    "href": "BirthdayParadox.html",
    "title": "BirthdayParadox",
    "section": "",
    "text": "Show the code\nsimulate_birthdays &lt;- function(number) {\n  birthdays &lt;- sample(1:365, number, replace = TRUE)\n  any(duplicated(birthdays))\n}\n\nsimulate_birthdays(100)\n\n\n[1] TRUE"
  },
  {
    "objectID": "RedLights.html",
    "href": "RedLights.html",
    "title": "Red Lights",
    "section": "",
    "text": "Show the code\nlibrary(purrr)\nlibrary(ggplot2)\n\ngamble &lt;- function(initial_amount, goal_amount, p_win, win_multiplier) {\n  money &lt;- initial_amount\n  \n  while(money &gt; 0 & money &lt; goal_amount) {\n    money &lt;- money + ifelse(runif(1) &lt; p_win, win_multiplier, -1)\n  }\n  \n  # True means that the gambler met their goal amount. False means the gambler went bankrupt.\n  return(outcome = ifelse(money &lt;= 0, FALSE, TRUE))\n}\n\n\n\n\nShow the code\ngamble(10, 100, 0.1, 10)\n\n\n[1] FALSE\n\n\n\n\nShow the code\ngamble_simulation &lt;- function(n_runs = 1000, initial_amount, goal_amount, p_win,\n                              win_multiplier) {\n  win_prob &lt;- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win,\n                                        win_multiplier)) |&gt;\n    mean()\n  return(data.frame(win_prob = win_prob))\n}\n\n\n\n\nShow the code\ngamble_simulation(initial_amount = 10, goal_amount = 20, p_win = 0.5, win_multiplier = 10)\n\n\n  win_prob\n1        1\n\n\n\n\nShow the code\nchanging_p_win &lt;- function(n_runs = 1000, initial_amount = 10, goal_amount = 100, p_win,\n                                win_multiplier = 10) {\n  win_probs &lt;- map_dbl(p_win_values, function(p_win) {\n    outcome &lt;- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win, win_multiplier))\n    mean(outcome)\n  })\n  \n  return(data.frame(p_win = p_win_values, win_prob = win_probs))\n}\n\n\n\n\nShow the code\np_win_values &lt;- seq(0.1, 0.9, by = 0.1)\n\nset.seed(47)\nchanging_p_win(p_win = p_win_values)\n\n\n  p_win win_prob\n1   0.1    0.224\n2   0.2    0.871\n3   0.3    0.967\n4   0.4    0.995\n5   0.5    0.999\n6   0.6    1.000\n7   0.7    1.000\n8   0.8    1.000\n9   0.9    1.000\n\n\n\n\nShow the code\nset.seed(47)\ngamble_simulation(initial_amount = 10, goal_amount = 100, p_win = 1/5000, win_multiplier = 10)\n\n\n  win_prob\n1        0\n\n\n\n\nShow the code\nchanging_win_multiplier &lt;- function(n_runs = 1000, initial_amount = 10, goal_amount = 100,\n                                    p_win = 0.1, win_multiplier) {\n  win_probs &lt;- map_dbl(win_multipliers, function(win_multiplier) {\n    outcome &lt;- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win, win_multiplier))\n    mean(outcome)\n  })\n  \n  return(data.frame(win_multiplier = win_multipliers, win_prob = win_probs))\n}\n\n\n\n\nShow the code\nwin_multipliers &lt;- seq(1, 100, 10)\n\nset.seed(47)\nchanging_win_multiplier(win_multiplier = win_multipliers)\n\n\n   win_multiplier win_prob\n1               1    0.000\n2              11    0.315\n3              21    0.585\n4              31    0.633\n5              41    0.643\n6              51    0.636\n7              61    0.664\n8              71    0.637\n9              81    0.657\n10             91    0.647\n\n\n\n\nShow the code\nchanging_initial_amount &lt;- function(n_runs = 1000, initial_amount, goal_amount = 100,\n                                    p_win = 0.1, win_multiplier = 10) {\n  win_probs &lt;- map_dbl(initial_amounts, function(initial_amount) {\n    outcome &lt;- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win, win_multiplier))\n    mean(outcome)\n  })\n  \n  return(data.frame(initial_amount = initial_amounts, win_prob = win_probs))\n}\n\n\n\n\nShow the code\ninitial_amounts &lt;- seq(1, 10, 1)\n\nset.seed(47)\nchanging_initial_amount(initial_amount = initial_amounts)\n\n\n   initial_amount win_prob\n1               1    0.021\n2               2    0.052\n3               3    0.072\n4               4    0.103\n5               5    0.110\n6               6    0.139\n7               7    0.142\n8               8    0.164\n9               9    0.169\n10             10    0.200"
  },
  {
    "objectID": "Slots.html",
    "href": "Slots.html",
    "title": "Slots Simulation",
    "section": "",
    "text": "The American Gaming Association recently reported that US casinos generated a record-breaking $49.78 billion dollars in 2024, a 0.8% increase over 2023 and the fourth-straight record-breaking year. Of this total, slot machines accounted for $36.06 billion.\nTo better understand slot machine odds, I sought to create a function in R that simulates the odds that an individual would either reach their goal revenue or go bankrupt at a slot machine. The function takes an initial amount of money, a goal amount of money, a win probability, and a win multiplier value. To determine whether the individual will reach their goal amount, the function generates a random uniform number between 0 and 1. If that number is less than or equal to the win probability, the individual will gain revenue from that round, equal to the win multiplier amount. If the random uniform number is greater than the win probability, then they will lose $1. Then, the next round is played by generating another random uniform number. This cycle continues until either 1) the player reaches or exceeds their goal amount or 2) the player goes bankrupt.\n\nlibrary(purrr)\nlibrary(ggplot2)\n\ngamble &lt;- function(initial_amount, goal_amount, p_win, win_multiplier) {\n  money &lt;- initial_amount\n  \n  while(money &gt; 0 & money &lt; goal_amount) {\n    money &lt;- money + ifelse(runif(1) &lt;= p_win, win_multiplier, -1)\n  }\n  \n  # True means that the gambler met their goal amount. False means the gambler went bankrupt.\n  return(outcome = ifelse(money &lt;= 0, FALSE, TRUE))\n}\n\nSome assumptions engrained into this function are that 1) win probability does not change and 2) each win generates the same amount of revenue. Using map(), the function runs 1,000 times, calculating a win probability representing the fraction of times the player will meet their goal amount out of 1,000 slot machine sessions.\n\ngamble_simulation &lt;- function(n_runs = 1000, initial_amount, goal_amount, p_win,\n                              win_multiplier) {\n  win_prob &lt;- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win,\n                                        win_multiplier)) |&gt;\n    mean()\n  return(data.frame(goal_prob = win_prob))\n}\n\nI first wanted to investigate how changing the win probability impacts the player’s chances of meeting their goal amount. I set the simulation to give the player an initial amount of $10 and a goal amount of $100. I set the win multiplier to 10, meaning that for every slot session that is won, the player will gain $10.\n\nchanging_p_win &lt;- function(n_runs = 1000, initial_amount = 10, goal_amount = 100, p_win,\n                                win_multiplier = 10) {\n  win_probs &lt;- map_dbl(p_win_values, function(p_win) {\n    outcome &lt;- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win, win_multiplier))\n    mean(outcome)\n  })\n  \n  return(data.frame(p_win = p_win_values, goal_prob = win_probs))\n}\n\nThe probability of reaching the goal amount was calculated for different win probabilities ranging from 0.1 to 0.9. Below are the results.\n\np_win_values &lt;- seq(0.1, 0.9, by = 0.1)\n\nset.seed(47)\np_win_variance &lt;- changing_p_win(p_win = p_win_values)\n\np_win_variance\n\n  p_win goal_prob\n1   0.1     0.224\n2   0.2     0.871\n3   0.3     0.967\n4   0.4     0.995\n5   0.5     0.999\n6   0.6     1.000\n7   0.7     1.000\n8   0.8     1.000\n9   0.9     1.000\n\nggplot(p_win_variance, aes(x = p_win, y = goal_prob)) +\n  geom_col(fill = \"steelblue3\") +\n  scale_x_continuous(breaks = seq(0.1, 0.9, by = 0.1)) +\n  labs(\n    x = \"Probability of Winning One Round of Slots\",\n    y = \"Probability of Reaching Goal Amount\",\n    title = \"Reaching Goal Amount Depends on the Probability of Each Singular Round\"\n  )\n\n\n\n\n\n\n\n\nAs expected, a greater win probability leads to a greater probability of reaching the goal amount. At win probabilities of 0.4 or greater, the player is almost guaranteed to reach their goal amount.\nHowever, in reality, slot machine odds are much worse than even the 0.1 win probability tested above. One estimate is that odds fall within a range of 1 in 5,000 to 1 in 34,000,000. To get a more accurate probability, I ran my simulation with a win probability of 1 in 5,000.\n\nset.seed(47)\ngamble_simulation(initial_amount = 10, goal_amount = 100, p_win = 0.002, win_multiplier = 10)\n\n  goal_prob\n1         0\n\n\nDecreasing the win probability to 1 in 5,000 changed the probability of reaching the goal value of $100 to 0, indicating it is extremely unlikely for the player to reach their goal in this scenario with this win probability.\nI was also curious as to how changing the win multiplier would change the probability of reaching the goal value. Because I wanted to be able to view trends in the data, I decided to set the win probability to 0.1 so that the player would have a visible chance at reaching their goal value. Again, I set the initial amount to $10 and the final amount to $100, running the simulation with different win multipliers ranging from 1 (the player wins $1 if they win the round) to 100 (the player wins $100 if they win the round).\n\nchanging_win_multiplier &lt;- function(n_runs = 1000, initial_amount = 10, goal_amount = 100,\n                                    p_win = 0.1, win_multiplier) {\n  win_probs &lt;- map_dbl(win_multipliers, function(win_multiplier) {\n    outcome &lt;- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win, win_multiplier))\n    mean(outcome)\n  })\n  \n  return(data.frame(win_multiplier = win_multipliers, goal_prob = win_probs))\n}\n\n\nwin_multipliers &lt;- c(1, seq(10, 100, 10))\n\nset.seed(47)\nwin_multiplier_variance &lt;- changing_win_multiplier(win_multiplier = win_multipliers)\n\nwin_multiplier_variance\n\n   win_multiplier goal_prob\n1               1     0.000\n2              10     0.227\n3              20     0.583\n4              30     0.640\n5              40     0.635\n6              50     0.655\n7              60     0.639\n8              70     0.676\n9              80     0.651\n10             90     0.633\n11            100     0.637\n\nggplot(win_multiplier_variance, aes(x = win_multiplier, y = goal_prob)) +\n  geom_col(fill = \"steelblue3\") +\n  scale_x_continuous(breaks = c(1, seq(10, 100, 10))) +\n  labs(\n    x = \"Win Multiplier\",\n    y = \"Probability of Reaching Goal Amount\",\n    title = \"Win Multiplier Does Not Continually Increase the Probability of Reaching Goal\"\n  )\n\n\n\n\n\n\n\n\nWhile changing the win multiplier from 1 to 10 and 10 to 20 greatly increased the probability of reaching the goal amount, these same effects were not observed with further increases of the win multiplier. This indicates that once the win multiplier reaches a certain number, it no longer increases the probability of achieving the goal amount. In other words, at a certain point, adding more money to the “jackpot” will not help players reach their goals.\nLastly, I wanted to see how changing the initial amount of money impacted the probability of reaching the goal amount. For this simulation, I set the goal amount to $100, the win probability to 0.1, and the win multiplier to 10 and tested initial amounts ranging from $1 to $10.\n\nchanging_initial_amount &lt;- function(n_runs = 1000, initial_amount, goal_amount = 100,\n                                    p_win = 0.1, win_multiplier = 10) {\n  win_probs &lt;- map_dbl(initial_amounts, function(initial_amount) {\n    outcome &lt;- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win, win_multiplier))\n    mean(outcome)\n  })\n  \n  return(data.frame(initial_amount = initial_amounts, goal_prob = win_probs))\n}\n\n\ninitial_amounts &lt;- seq(1, 10, 1)\n\nset.seed(47)\ninitial_amount_variance &lt;- changing_initial_amount(initial_amount = initial_amounts)\n\ninitial_amount_variance\n\n   initial_amount goal_prob\n1               1     0.021\n2               2     0.052\n3               3     0.072\n4               4     0.103\n5               5     0.110\n6               6     0.139\n7               7     0.142\n8               8     0.164\n9               9     0.169\n10             10     0.200\n\nggplot(initial_amount_variance, aes(x = initial_amount, y = goal_prob)) +\n  geom_col(fill = \"steelblue3\") +\n  scale_x_continuous(breaks = seq(1, 10, 1)) +\n  labs(\n    x = \"Initial Amount ($)\",\n    y = \"Probability of Reaching Goal Amount\",\n    title = \"Increasing Initial Amount Increases the Probability of Reaching Goal\"\n  )\n\n\n\n\n\n\n\n\nThe data shows that increasing the initial amount of money for use at the slot machine increases the probability that a player will reach their goal amount. Thus, players that spend more are more likely to win because spending more money creates more opportunities to fall below the win probability and cash in on a win. This is part of why gambling and slots are so addictive-players believe that if they just try one more time and spend a little more, then in the next round they will hit the jackpot."
  }
]