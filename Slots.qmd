---
title: "Slots"
description: |
  Slot machine simulation
author: Emmie Appl
date: April 2, 2025
format:
  html:
    code-fold: true
    code-summary: "Show the code"
execute:
  warning: false
  message: false
---

The American Gaming Association recently reported that US casinos generated a record-breaking \$49.78 billion dollars in 2024, a 0.8% increase over 2023 and the fourth-straight record-breaking year. Of this total, slot machines accounted for \$36.06 billion.

To better understand slot machine odds, I sought to create a function in R that simulates the odds that an individual would either reach their goal revenue or go bankrupt at a slot machine. The function takes an initial amount of money, a goal amount of money, a win probability, and a win multiplier value. To determine whether the individual will reach their goal revenue, the function will generate a random uniform number between 0 and 1. If that number is less than or equal to the win probability, the individual will gain revenue from that round, equal to the win multiplier amount. If the random uniform number is greater than the win probability, then they will lose \$1. Then, the next round is played in the form of the generation of another random uniform number. This cycle continues until either 1) the player reaches or exceeds their goal revenue or 2) the player goes bankrupt.

```{r}
library(purrr)
library(ggplot2)

gamble <- function(initial_amount, goal_amount, p_win, win_multiplier) {
  money <- initial_amount
  
  while(money > 0 & money < goal_amount) {
    money <- money + ifelse(runif(1) <= p_win, win_multiplier, -1)
  }
  
  # True means that the gambler met their goal amount. False means the gambler went bankrupt.
  return(outcome = ifelse(money <= 0, FALSE, TRUE))
}
```

Some assumptions ingrained into this function are that 1) win probability does not change and 2) each win generates the same amount of revenue.

```{r}
gamble(10, 100, 0.1, 10)
```

```{r}

gamble_simulation <- function(n_runs = 1000, initial_amount, goal_amount, p_win,
                              win_multiplier) {
  win_prob <- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win,
                                        win_multiplier)) |>
    mean()
  return(data.frame(win_prob = win_prob))
}
```

```{r}
gamble_simulation(initial_amount = 10, goal_amount = 20, p_win = 0.5, win_multiplier = 10)
```

```{r}
changing_p_win <- function(n_runs = 1000, initial_amount = 10, goal_amount = 100, p_win,
                                win_multiplier = 10) {
  win_probs <- map_dbl(p_win_values, function(p_win) {
    outcome <- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win, win_multiplier))
    mean(outcome)
  })
  
  return(data.frame(p_win = p_win_values, win_prob = win_probs))
}
```

```{r}
p_win_values <- seq(0.1, 0.9, by = 0.1)

set.seed(47)
changing_p_win(p_win = p_win_values)
```

```{r}
set.seed(47)
gamble_simulation(initial_amount = 10, goal_amount = 100, p_win = 1/5000, win_multiplier = 10)
```

```{r}
changing_win_multiplier <- function(n_runs = 1000, initial_amount = 10, goal_amount = 100,
                                    p_win = 0.1, win_multiplier) {
  win_probs <- map_dbl(win_multipliers, function(win_multiplier) {
    outcome <- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win, win_multiplier))
    mean(outcome)
  })
  
  return(data.frame(win_multiplier = win_multipliers, win_prob = win_probs))
}
```

```{r}
win_multipliers <- seq(1, 100, 10)

set.seed(47)
changing_win_multiplier(win_multiplier = win_multipliers)
```

```{r}
changing_initial_amount <- function(n_runs = 1000, initial_amount, goal_amount = 100,
                                    p_win = 0.1, win_multiplier = 10) {
  win_probs <- map_dbl(initial_amounts, function(initial_amount) {
    outcome <- map_lgl(1:n_runs, ~gamble(initial_amount, goal_amount, p_win, win_multiplier))
    mean(outcome)
  })
  
  return(data.frame(initial_amount = initial_amounts, win_prob = win_probs))
}
```

```{r}
initial_amounts <- seq(1, 10, 1)

set.seed(47)
changing_initial_amount(initial_amount = initial_amounts)
```
